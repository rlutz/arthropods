#!/usr/bin/python
# arthropods - Generate footprints for arthropodic components
# Copyright (C) 2015 Roland Lutz
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

import getopt, sys

line_thickness = '10mil'

pin_thickness = '1.5mm'
pin_clearance = '1.mm'
pin_mask = '1.6mm'
pin_drill = '1.mm'

pad_thickness = '1.492mm'
pad_clearance = '1.mm'
pad_mask = '1.59mm'

pad_length = 50.

# Formatting mm/mil lengths

def format_number(length, unit):
    if isinstance(length, str):
        if '.' in length:
            length = float(length)
        else:
            length = int(length)
    if isinstance(length, int):
        if length == 0:
            return "0.0000"
        return "%d.00%s" % (length, unit)
    if isinstance(length, float):
        if length == 0.:
            return "0.0000"
        if unit == 'mm':
            return "%.4f%s" % (length, unit)
        if unit == 'mil':
            return "%.2f%s" % (length, unit)
    raise ValueError

def format(length):
    if isinstance(length, int) or isinstance(length, float):
        return format_number(length, 'mm')
    if isinstance(length, str):
        if length.endswith("mm"):
            return format_number(length[:-2], length[-2:])
        if length.endswith("mil"):
            return format_number(length[:-3], length[-3:])
    raise ValueError

# Output

def start(flags, desc, name, value, mark_x, mark_y,
          text_x, text_y, text_dir, text_scale, text_flags):
    if isinstance(flags, list):
        flags = ','.join(flags)
    elif flags is None:
        flags = ""
    if name is None:
        name = desc
    if value is None:
        value = desc
    if isinstance(text_flags, list):
        text_flags = ','.join(text_flags)
    elif text_flags is None:
        text_flags = ""
    print 'Element["%s" "%s" "%s" "%s" %s %s %s %s %s %s "%s"]' % (
        flags, desc, name, value,
        format(mark_x), format(mark_y), format(text_x), format(text_y),
        text_dir, text_scale, text_flags)
    print '('

def pin(x, y, thickness, clearance, mask, drill,
        name, number = None, flags = None):
    if number is None:
        number = name
    if isinstance(flags, list):
        flags = ','.join(flags)
    elif flags is None:
        flags = ""
    print "\tPin[%s %s %s %s %s %s \"%s\" \"%s\" \"%s\"]" % (
        format(x), format(y),
        format(thickness), format(clearance), format(mask), format(drill),
        name, number, flags)

def pad(x0, y0, x1, y1, thickness, clearance, mask,
        name, number = None, flags = None):
    if number is None:
        number = name
    if isinstance(flags, list):
        flags = ','.join(flags)
    elif flags is None:
        flags = ""
    print "\tPad[%s %s %s %s %s %s %s \"%s\" \"%s\" \"%s\"]" % (
        format(x0), format(y0), format(x1), format(y1),
        format(thickness), format(clearance), format(mask),
        name, number, flags)

def line(x0, y0, x1, y1):
    print "\tElementLine [%s %s %s %s %s]" % (
        format(x0), format(y0), format(x1), format(y1), format(line_thickness))

def arc(x, y, xradius, yradius, start_angle, delta_angle):
    print "\tElementArc [%s %s %s %s %d %d %s]" % (
        format(x), format(y), format(xradius), format(yradius),
        start_angle, delta_angle, format(line_thickness))

def end():
    print
    print "\t)"

# Parameter handling

STYLE_THICKENED, STYLE_DENT, STYLE_BOXED, STYLE_SOCKET, \
    STYLE_WSL_ARROW, STYLE_WSL_DENT, STYLE_PSL = xrange(7)
SHAPE_STRAIGHT, SHAPE_ZIGZAG, SHAPE_USHAPED, SHAPE_AB, SHAPE_BA = xrange(5)

def invalid_arguments(message):
    sys.stderr.write("%s: %s\n" % (sys.argv[0], message))
    sys.stderr.write("Try `%s --help' for more information.\n" % sys.argv[0])
    sys.exit(1)

def main():
    global pad_length
    global line_thickness, pin_thickness, pin_clearance, pin_mask, pin_drill, \
           pad_thickness, pad_clearance, pad_mask

    try:
        options, args = getopt.getopt(
            sys.argv[1:], 's:ZUABd:p:', [
                'style=',
                'straight', 'zigzag', 'u-shaped', 'ab', 'ba',
                'row-distance=', 'pad-length=',
                'line-thickness=',
                'pin-thickness=',
                'pin-clearance=',
                'pin-mask=',
                'pin-drill=',
                'pad-thickness=',
                'pad-clearance=',
                'pad-mask=',
                'help', 'version'
            ])
    except getopt.GetoptError as e:
        invalid_arguments(e.msg)

    style = STYLE_THICKENED
    shape = SHAPE_STRAIGHT
    row_distance = 100

    for option, value in options:
        if option in ['-s', '--style']:
            try:
                style = { 'thickened': STYLE_THICKENED,
                          'dent': STYLE_DENT,
                          'boxed': STYLE_BOXED,
                          'socket': STYLE_SOCKET,
                          'wsl-arrow': STYLE_WSL_ARROW,
                          'wsl-dent': STYLE_WSL_DENT,
                          'psl': STYLE_PSL
                }[value]
            except KeyError:
                invalid_arguments("`%s' is not a valid silk style" % value)
        elif option == '--straight':
            shape = SHAPE_STRAIGHT
        elif option in ['-Z', '--zigzag']:
            shape = SHAPE_ZIGZAG
        elif option in ['-U', '--u-shaped']:
            shape = SHAPE_USHAPED
        elif option in ['-A', '--ab']:
            shape = SHAPE_AB
        elif option in ['-B', '--ba']:
            shape = SHAPE_BA
        elif option in ['-d', '--row-distance']:
            try:
                row_distance = int(value)
            except ValueError:
                invalid_arguments("`%s' is not an integer" % value)
        elif option in ['-p', '--pad-length']:
            try:
                pad_length = float(value)
            except ValueError:
                invalid_arguments("`%s' is not a floating point number" % value)
        elif option == '--line-thickness':
            if not value.endswith('mm') and not value.endswith('mil'):
                invalid_arguments("`%s' is not a length in mm or mil" % value)
            line_thickness = value
        elif option == '--pin-thickness':
            if not value.endswith('mm') and not value.endswith('mil'):
                invalid_arguments("`%s' is not a length in mm or mil" % value)
            pin_thickness = value
        elif option == '--pin-clearance':
            if not value.endswith('mm') and not value.endswith('mil'):
                invalid_arguments("`%s' is not a length in mm or mil" % value)
            pin_clearance = value
        elif option == '--pin-mask':
            if not value.endswith('mm') and not value.endswith('mil'):
                invalid_arguments("`%s' is not a length in mm or mil" % value)
            pin_mask = value
        elif option == '--pin-drill':
            if not value.endswith('mm') and not value.endswith('mil'):
                invalid_arguments("`%s' is not a length in mm or mil" % value)
            pin_drill = value
        elif option == '--pad-thickness':
            if not value.endswith('mm') and not value.endswith('mil'):
                invalid_arguments("`%s' is not a length in mm or mil" % value)
            pad_thickness = value
        elif option == '--pad-clearance':
            if not value.endswith('mm') and not value.endswith('mil'):
                invalid_arguments("`%s' is not a length in mm or mil" % value)
            pad_clearance = value
        elif option == '--pad-mask':
            if not value.endswith('mm') and not value.endswith('mil'):
                invalid_arguments("`%s' is not a length in mm or mil" % value)
            pad_mask = value
        elif option == '--help':
            sys.stdout.write("Usage: %s NAME PIN_COUNT\n" % sys.argv[0])
            sys.stdout.write("Generate footprints for arthropodic components\n")
            sys.stdout.write("\n")
            sys.stdout.write(
"      -s, --style=thickened|dent|boxed|socket|wsl-arrow|wsl-dent|psl\n"
"                        use this style to indicate pin 1 on the silk layer\n")
            sys.stdout.write("\n")
            sys.stdout.write(
"      --straight        one straight row of pins\n"
"      -Z, --zigzag      two rows of pins, numbered in zig-zag\n"
"      -U, --u-shaped    two rows of pins, numbered in an U shape\n"
"      -A, --ab          two rows of pins, numbered A1..An and B1..Bn\n"
"      -B, --ba          two rows of pins, numbered B1..Bn and A1..An\n")
            sys.stdout.write("\n")
            sys.stdout.write(
"      -d, --row-distance=DISTANCE\t[default: %d]\n"
"                        distance between the rows, as a number in mils\n"
"      -p, --pad-length=LENGTH\t\t[default: %.2f]\n"
"                        length of the solder pads, as a number in mils\n"
                % (row_distance, pad_length))
            sys.stdout.write("\n")
            sys.stdout.write(
"      --line-thickness=Xmm|Xmil\t[default: %s]\n"
"      --pin-thickness=Xmm|Xmil\t[default: %s]\n"
"      --pin-clearance=Xmm|Xmil\t[default: %s]\n"
"      --pin-mask=Xmm|Xmil\t[default: %s]\n"
"      --pin-drill=Xmm|Xmil\t[default: %s]\n"
"      --pad-thickness=Xmm|Xmil\t[default: %s]\n"
"      --pad-clearance=Xmm|Xmil\t[default: %s]\n"
"      --pad-mask=Xmm|Xmil\t[default: %s]\n"
                % (line_thickness,
                   pin_thickness, pin_clearance, pin_mask, pin_drill,
                   pad_thickness, pad_clearance, pad_mask))
            sys.stdout.write("\n")
            sys.stdout.write(
"      --help            give this help\n"
"      --version         display version number\n")
            sys.exit(0)
        elif option == '--version':
            sys.stdout.write(
"Arthropods - footprint generator for arthropodic components\n")
            sys.stdout.write("Copyright (C) 2015 Roland Lutz\n")
            sys.stdout.write("\n")
            sys.stdout.write(
"This program is free software; you can redistribute it and/or\n"
"modify it under the terms of the GNU General Public License\n"
"as published by the Free Software Foundation; either version 2\n"
"of the License, or (at your option) any later version.\n")
            sys.stdout.write("\n")
            sys.stdout.write(
"This program is distributed in the hope that it will be useful,\n"
"but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"GNU General Public License for more details.\n")
            sys.exit(0)
        else:
            raise AssertionError

    try:
        name, pin_count_str = args
    except ValueError:
        sys.stdout.write("Usage: %s NAME PIN_COUNT\n" % sys.argv[0])
        sys.stderr.write("Try `%s --help' for more information.\n"
                         % sys.argv[0])
        sys.exit(1)

    try:
        pin_count = int(pin_count_str)
    except ValueError:
        invalid_arguments("`%s' is not an integer" % pin_count_str)

    if shape != SHAPE_STRAIGHT and pin_count % 2 != 0:
        invalid_arguments("Pin count for zigzag/u-shaped/AB/BA must be even")

    if shape == SHAPE_STRAIGHT:
        rows = 1
        row_distance = 0
    else:
        rows = 2

    eff_pin_count = pin_count // rows

    # Calculate dimensions

    width = float(row_distance)
    height = (eff_pin_count - 1) * 100

    if style in [STYLE_WSL_ARROW, STYLE_WSL_DENT]:
        x_offset = 125.
        y_offset = 200.
    else:
        x_offset = 50.
        y_offset = 50.

    x0 = -x_offset; x1 = width + x_offset
    y0 = -y_offset; y1 = height + y_offset

    if style == STYLE_DENT:
        text_x, text_y, text_dir, text_scale = \
          '%.2fmil' % (width / 2 + 30.), '25mil', 3, 100
    elif style == STYLE_PSL:
        text_x, text_y, text_dir, text_scale = \
          '-68.11mil', '-506.69mil', 0, 100
    elif shape == SHAPE_STRAIGHT:
        text_x, text_y, text_dir, text_scale = \
          '%.2fmil' % (x1 + 70.), '%.2fmil' % (y0 + 5.), 3, 100
    else:
        text_x, text_y, text_dir, text_scale = \
          '%.2fmil' % x0, '%.2fmil' % (y0 - 70.), 0, 100

    if style in [STYLE_SOCKET, STYLE_PSL]:
        if shape == SHAPE_STRAIGHT:
            invalid_arguments("This style only works with two pin rows")
        if row_distance != 100:
            invalid_arguments(
                "This style does not work with a custom row distance")

    start(None, name, name, name, 0., 0.,
          text_x, text_y, text_dir, text_scale, None)

    for i in xrange(0, eff_pin_count):
        y = '%.2fmil' % (i * 100)
        if i == 0:
            if shape == SHAPE_BA:
                maybe_square = []
                other_maybe_square = ['square']
            else:
                maybe_square = ['square']
                other_maybe_square = []
        else:
            maybe_square = []
            other_maybe_square = []

        if shape == SHAPE_ZIGZAG:
            i0, i1 = i * 2 + 1, i * 2 + 2
        if shape == SHAPE_USHAPED:
            i0, i1 = i + 1, pin_count - i
        if shape == SHAPE_AB:
            i0, i1 = 'A%d' % (i + 1), 'B%d' % (i + 1)
        if shape == SHAPE_BA:
            i0, i1 = 'B%d' % (i + 1), 'A%d' % (i + 1)

        if shape == SHAPE_STRAIGHT:
            pin(0., y, pin_thickness, pin_clearance, pin_mask, pin_drill,
                i + 1, flags = maybe_square)
            pad('%.2fmil' % (-pad_length / 2.), y,
                '%.2fmil' % (pad_length / 2.), y,
                pad_thickness, pad_clearance, pad_mask,
                i + 1, flags = ['onsolder'] + maybe_square)
        elif row_distance < 100 + pad_length:
            pin('0mil', y,
                pin_thickness, pin_clearance, pin_mask, pin_drill,
                i0, flags = maybe_square)
            pin('%.2fmil' % width, y,
                pin_thickness, pin_clearance, pin_mask, pin_drill,
                i1, flags = other_maybe_square)
            pad('%.2fmil' % -pad_length, y, '0mil', y,
                pad_thickness, pad_clearance, pad_mask,
                i0, flags = ['onsolder'] + maybe_square)
            pad('%.2fmil' % width, y, '%.2fmil' % (width + pad_length), y,
                pad_thickness, pad_clearance, pad_mask,
                i1, flags = ['onsolder', 'edge2'] + other_maybe_square)
        else:
            pin('0mil', y,
                pin_thickness, pin_clearance, pin_mask, pin_drill,
                i0, flags = maybe_square)
            pad('%.2fmil' % (-pad_length / 2.), y,
                '%.2fmil' % (pad_length / 2.), y,
                pad_thickness, pad_clearance, pad_mask,
                i0, flags = ['onsolder'] + maybe_square)
            pin('%.2fmil' % width, y,
                pin_thickness, pin_clearance, pin_mask, pin_drill,
                i1, flags = other_maybe_square)
            pad('%.2fmil' % (width - pad_length / 2.), y,
                '%.2fmil' % (width + pad_length / 2.), y,
                pad_thickness, pad_clearance, pad_mask,
                i1, flags = ['onsolder', 'edge2'] + other_maybe_square)

    # Paint outline

    if style == STYLE_THICKENED:
        # thick line
        line('%.2fmil' % x0, '%.2fmil' % y0,
             '%.2fmil' % x1, '%.2fmil' % y0)
        line('%.2fmil' % x0, '%.2fmil' % (y0 + 5),
             '%.2fmil' % x1, '%.2fmil' % (y0 + 5))
        line('%.2fmil' % x0, '%.2fmil' % (y0 + 10),
             '%.2fmil' % x1, '%.2fmil' % (y0 + 10))
    elif style == STYLE_DENT:
        # dent
        line('%.2fmil' % x0, '%.2fmil' % y0,
             '%.2fmil' % (width / 2 - 50), '%.2fmil' % y0)
        arc('%.2fmil' % (width / 2), '%.2fmil' % y0, '50mil', '50mil', 0, 90)
        arc('%.2fmil' % (width / 2), '%.2fmil' % y0, '50mil', '50mil', 90, 90)
        line('%.2fmil' % (width / 2 + 50), '%.2fmil' % y0,
             '%.2fmil' % x1, '%.2fmil' % y0)
    elif style == STYLE_BOXED:
        # box around pin 1
        line('%.2fmil' % x0, '%.2fmil' % y0, '%.2fmil' % x1, '%.2fmil' % y0)
        line('-50mil', '50mil', '50mil', '50mil')
        line('50mil', '-50mil', '50mil', '50mil')
    elif style == STYLE_SOCKET:
        line('-30mil', '-50mil', '130mil', '-50mil')
        for i in xrange(0, eff_pin_count):
            line('-30mil', '%.2fmil' % (i * 100. - 50.),
                 '-50mil', '%.2fmil' % (i * 100. - 30.))
            line('-50mil', '%.2fmil' % (i * 100. - 30.),
                 '-50mil', '%.2fmil' % (i * 100. + 30.))
            line('-50mil', '%.2fmil' % (i * 100. + 30.),
                 '-30mil', '%.2fmil' % (i * 100. + 50.))

            line('130mil', '%.2fmil' % (i * 100. - 50.),
                 '150mil', '%.2fmil' % (i * 100. - 30.))
            line('150mil', '%.2fmil' % (i * 100. - 30.),
                 '150mil', '%.2fmil' % (i * 100. + 30.))
            line('150mil', '%.2fmil' % (i * 100. + 30.),
                 '130mil', '%.2fmil' % (i * 100. + 50.))

        line('-30mil', '%.2fmil' % (eff_pin_count * 100. - 50.),
             '130mil', '%.2fmil' % (eff_pin_count * 100. - 50.))
    elif style == STYLE_WSL_ARROW:
        # arrow
        line('%.2fmil' % x0, '%.2fmil' % y0, '%.2fmil' % x1, '%.2fmil' % y0)
        line('-125mil', '50mil', '-75mil', '0mil')
        line('-75mil', '0mil', '-125mil', '-50mil')
    elif style == STYLE_WSL_DENT:
        # dent
        line('%.2fmil' % x0, '%.2fmil' % y0, '%.2fmil' % x1, '%.2fmil' % y0)
        line('%.2fmil' % x0, '%.2fmil' % (height / 2 - 100),
             '%.2fmil' % (x0 + 50), '%.2fmil' % (height / 2 - 100))
        line('%.2fmil' % (x0 + 50), '%.2fmil' % (height / 2 - 100),
             '%.2fmil' % (x0 + 50), '%.2fmil' % (height / 2 + 100))
        line('%.2fmil' % (x0 + 50), '%.2fmil' % (height / 2 + 100),
             '%.2fmil' % x0, '%.2fmil' % (height / 2 + 100))
    elif style == STYLE_PSL:
        # bottom part
        pin('50mil', '%.2fmil' % (height + 231.10),
            '147.80mil', '121.37mil', '151.74mil', '118.11mil', 0)
        line('299.21mil', '%.2fmil' % (height + 427.75),
             '929.13mil', '%.2fmil' % (height + 683.66))
        line('653.54mil', '%.2fmil' % (height + 408.07),
             '968.50mil', '%.2fmil' % (height + 604.92))
        line('653.54mil', '%.2fmil' % (height + 152.16),
             '456.69mil', '%.2fmil' % (height + 152.16))
        line('653.54mil', '%.2fmil' % (height + 408.07),
             '653.54mil', '%.2fmil' % (height + 152.16))
        line('220.47mil', '%.2fmil' % (height + 427.76),
             '653.54mil', '%.2fmil' % (height + 408.07))
        line('870.079mil', '%.2fmil' % (height + 486.80),
             '850.40mil', '%.2fmil' % (height + 526.17))
        line('889.77mil', '%.2fmil' % (height + 427.75),
             '870.079mil', '%.2fmil' % (height + 486.80))
        line('988.189mil', '%.2fmil' % (height + 506.49),
             '889.77mil', '%.2fmil' % (height + 427.75))
        line('50mil', '%.2fmil' % (height + 216.10),
             '50mil', '%.2fmil' % (height + 246.10))
        line('35.00mil', '%.2fmil' % (height + 231.10),
             '65.00mil', '%.2fmil' % (height + 231.10))
        line('988.189mil', '%.2fmil' % (height + 624.60),
             '988.189mil', '%.2fmil' % (height + 506.49))
        line('988.189mil', '%.2fmil' % (height + 624.60),
             '968.50mil', '%.2fmil' % (height + 604.92))
        arc('50mil', '%.2fmil' % (height + 231.10),
            '125.00mil', '125.00mil', 35, 290)
        arc('929.13mil', '%.2fmil' % (height + 624.60),
            '59.06mil', '59.06mil', 90, 90)

        # top part
        pin('50mil', '-231.10mil', '147.80mil', '123.37mil', '151.74mil', '118.11mil', 0)
        line('299.21mil', '-427.75mil', '929.13mil', '-683.66mil')
        line('653.54mil', '-408.07mil', '968.50mil', '-604.92mil')
        line('653.54mil', '-152.16mil', '456.69mil', '-152.16mil')
        line('653.54mil', '-408.07mil', '653.54mil', '-152.16mil')
        line('220.47mil', '-427.76mil', '653.54mil', '-408.07mil')
        line('870.079mil', '-486.80mil', '850.40mil', '-526.17mil')
        line('889.77mil', '-427.75mil', '870.079mil', '-486.80mil')
        line('988.189mil', '-506.49mil', '889.77mil', '-427.75mil')
        line('50mil', '-216.10mil', '50mil', '-246.10mil')
        line('35.00mil', '-231.10mil', '65.00mil', '-231.10mil')
        line('988.189mil', '-624.60mil', '988.189mil', '-506.49mil')
        line('988.189mil', '-624.60mil', '968.50mil', '-604.92mil')
        arc('50mil', '-231.10mil', '125.00mil', '125.00mil', 35, 290)
        arc('929.13mil', '-624.60mil', '59.06mil', '59.06mil', 180, 90)

        # box
        line('-55.12mil', '%.2fmil' % (height + 428.15),
             '259.84mil', '%.2fmil' % (height + 428.15))
        line('-55.12mil', '-427.76mil', '-55.12mil',
             '%.2fmil' % (height + 428.15))
        line('456.69mil', '%.2fmil' % (height + 418.32),
             '456.69mil', '-417.91mil')
        line('220.47mil', '-427.76mil',
             '-55.12mil', '-427.76mil')

        # mark on the left
        line('-75.00mil', '0mil', '-125.00mil', '-50.00mil')
        line('-125.00mil', '50.00mil', '-75.00mil', '0mil')

        # mark in the middle
        line('50mil', '%.2fmil' % (height / 2 - 50),
             '50mil', '%.2fmil' % (height / 2))
        line('50mil', '%.2fmil' % (height / 2),
             '100.00mil', '%.2fmil' % (height / 2))
        line('50mil', '%.2fmil' % (height / 2 + 50),
             '50mil', '%.2fmil' % (height / 2))
        line('50mil', '%.2fmil' % (height / 2),
             '0mil', '%.2fmil' % (height / 2))
    else:
        raise ValueError

    if style not in [STYLE_SOCKET, STYLE_PSL]:
        line('%.2fmil' % x1, '%.2fmil' % y0, '%.2fmil' % x1, '%.2fmil' % y1)
        line('%.2fmil' % x1, '%.2fmil' % y1, '%.2fmil' % x0, '%.2fmil' % y1)
        line('%.2fmil' % x0, '%.2fmil' % y1, '%.2fmil' % x0, '%.2fmil' % y0)

    end()

if __name__ == '__main__':
    main()
